<?php

/**
 * ${FILENAME}
 * This File is auto generated
 * created by ramsondon type hinted ArrayCollections Generator
 * author: Matthias Schmid<ramsondon@gmail.com>
 * Date: ${DATE}
 */

namespace ${NAMESPACE};

use ${USING};

class ${CLASSNAME} extends ${PARENTCLASSNAME} implements \${NAMESPACE}\I${CLASSNAME}
{
    /**
     * @param ${OBJECTCLASS} $value
     */
    public function append(${OBJECTCLASS} $value)
    {
        $this->impl->append($value);
    }

    /**
     * Returns the value at $index or null on failure
     *
     * @param int $index
     * @return ${OBJECTCLASS}|null on failure
     */
    public function getAt($index)
    {
        return $this->impl->getAt($index);
    }

    /**
     * Removes the element at the $index and returns true on success. false on failure
     *
     * @param int $index
     * @return bool
     */
    public function removeAt($index)
    {
        return $this->impl->removeAt($index);
    }

    /**
     * (PHP 5 &gt;= 5.0.0)<br/>
     * Return the current element
     * @link http://php.net/manual/en/iterator.current.php
     * @return mixed Can return any type.
     */
    public function current()
    {
        return $this->impl->current();
    }

    /**
     * (PHP 5 &gt;= 5.0.0)<br/>
     * Move forward to next element
     * @link http://php.net/manual/en/iterator.next.php
     * @return void Any returned value is ignored.
     */
    public function next()
    {
        $this->impl->next();
    }

    /**
     * (PHP 5 &gt;= 5.0.0)<br/>
     * Return the key of the current element
     * @link http://php.net/manual/en/iterator.key.php
     * @return mixed scalar on success, or null on failure.
     */
    public function key()
    {
        return $this->impl->key();
    }

    /**
     * (PHP 5 &gt;= 5.0.0)<br/>
     * Checks if current position is valid
     * @link http://php.net/manual/en/iterator.valid.php
     * @return boolean The return value will be casted to boolean and then evaluated.
     * Returns true on success or false on failure.
     */
    public function valid()
    {
        return $this->impl->valid();
    }

    /**
     * (PHP 5 &gt;= 5.0.0)<br/>
     * Rewind the Iterator to the first element
     * @link http://php.net/manual/en/iterator.rewind.php
     * @return void Any returned value is ignored.
     */
    public function rewind()
    {
        $this->impl->rewind();
    }

    /**
     * (PHP 5 &gt;= 5.1.0)<br/>
     * Count elements of an object
     * @link http://php.net/manual/en/countable.count.php
     * @return int The custom count as an integer.
     * </p>
     * <p>
     * The return value is cast to an integer.
     */
    public function count()
    {
        return $this->impl->count();
    }
}